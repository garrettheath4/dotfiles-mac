#!/usr/bin/env bash

approvedPkgsFile=~/.brew/approved_packages
approvedCasksFile=~/.brew/approved_casks
greedyCasksFile=~/.brew/greedy_casks

if [ "$1" == '--notify' ]; then
	shift
	brew update >/dev/null
	brewOutdated=$(brew outdated --formula)
	caskOutdated=$(brew outdated --cask)
	if [ -n "$brewOutdated" ] || [ -n "$caskOutdated" ] || [ "$1" == '--test' ]; then
		# shellcheck disable=SC2016
		osascript -e 'display notification "Updates are available for Homebrew. Run `'"$(basename "$0")"'` when you get a chance." with title "Homebrew"'
		exit 1
	else
		exit 0
	fi
fi

printWithUrlExceptTrusted() {
	# Usage: printWithUrlExceptTrusted <brewOutdatedOutput> <approvedList> <formula|cask>

	# ==> Outdated Packages
	# libomp (9.0.1) < 10.0.0  -  https://formulae.brew.sh/formula/libomp
	# sbt (1.3.8_1) < 1.3.9  -  https://formulae.brew.sh/formula/sbt
	# ==> Outdated Casks (update with `brew upgrade --cask`)
	#

	local brewOutdated="$1"
	local approved="$2"
	local urlPath="$3/"

	while IFS= read -r line; do
		if echo "$approved" | grep -wq "$(echo "$line" | cut -f1 -d' ')"; then
			echo "$line"
		else
			echo "$line" | sed -E "s|([^ ]+)(.*)|\1\2  -  https://formulae.brew.sh/$urlPath\1|"
		fi
	done <<< "$brewOutdated"
}

messages=''

approvedPkgsList=''
if [ -r $approvedPkgsFile ]; then
	approvedPkgsList=$(cat $approvedPkgsFile)
else
	messages="${messages}\nNo approved packages list file present at $approvedPkgsFile"
fi

approvedCasksList=''
if [ -r $approvedCasksFile ]; then
	approvedCasksList=$(cat $approvedCasksFile)
else
	messages="${messages}\nNo approved casks list file present at $approvedCasksFile"
fi

greedyCasksList=''
if [ -r $greedyCasksFile ]; then
	greedyCasksList=$(cat $greedyCasksFile)
else
	messages="${messages}\nNo greedy (force update) casks list file present at $greedyCasksFile"
fi

if [ -n "$messages" ]; then
	echo    '==> WARNING'
	echo -e "$messages"
	echo
fi

brew update
echo
echo '==> Outdated Packages'
brewOutdated=$(brew outdated --formula --verbose)
printWithUrlExceptTrusted "$brewOutdated" "$approvedPkgsList" 'formula'

# shellcheck disable=SC2016
echo '==> Outdated Casks (update with `brew upgrade --cask`)'
caskOutdated=$(brew outdated --cask --verbose)
printWithUrlExceptTrusted "$caskOutdated" "$approvedCasksList" 'cask'

# shellcheck disable=SC2016
echo '--> Outdated Auto-Updating Casks (update with `brew upgrade --cask --greedy`)'
caskGreedyOutdated=''
if [ -n "$greedyCasksList" ]; then
	caskGreedyOutdatedVerbose=$(echo "$greedyCasksList" | xargs brew outdated --cask --greedy --verbose)
	echo "$caskGreedyOutdatedVerbose"
	caskGreedyOutdated=$(echo "$caskGreedyOutdatedVerbose" | cut -f1 -d' ')
fi

rangBell=no
pleaseUpgradePackages=no
pleaseUpgradeCasks=no
pleaseUpgradeGreedyCasks=no

if [ -n "$brewOutdated" ]; then
	if [ "$rangBell" == "no" ]; then
		echo -en '\a'
		rangBell=yes
	fi
	read -p "Some packages are outdated. Upgrade? (Y/n): " -n 1 -r
	if [[ ! $REPLY =~ ^[Nn]$ ]]; then
		pleaseUpgradePackages=yes
	fi
fi

if [ -n "$caskOutdated" ]; then
	if [ "$rangBell" == "no" ]; then
		echo -en '\a'
		rangBell=yes
	fi
	read -p "Some casks are outdated. Upgrade casks? (Y/n): " -n 1 -r
	if [[ ! $REPLY =~ ^[Nn]$ ]]; then
		pleaseUpgradeCasks=yes
	fi
fi

if [ -n "$caskGreedyOutdated" ]; then
	if [ "$rangBell" == "no" ]; then
		echo -en '\a'
		rangBell=yes
	fi
	read -p "Some 'self-updating' casks are outdated. Upgrade greedy casks? (Y/n): " -n 1 -r
	if [[ ! $REPLY =~ ^[Nn]$ ]]; then
		pleaseUpgradeGreedyCasks=yes
	fi
fi


if [ "$pleaseUpgradeCasks" == "yes" ] || [ "$pleaseUpgradeGreedyCasks" == "yes" ]; then
	echo 'Sudo access might be necessary when upgrading casks. Pre-authenticate now:'
	sudo echo 'Authenticated.'
fi

if [ "$pleaseUpgradePackages" == "yes" ]; then
	brew upgrade --formula
fi

if [ "$pleaseUpgradeCasks" == "yes" ]; then
	brew upgrade --cask
fi

if [ "$pleaseUpgradeGreedyCasks" == "yes" ]; then
	echo "$caskGreedyOutdated" | xargs brew upgrade --cask --greedy
fi

